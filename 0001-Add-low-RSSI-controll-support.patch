From 4bac8ace7b946902636709a17eb1b8e463ac625d Mon Sep 17 00:00:00 2001
From: Robert Marko <robimarko@gmail.com>
Date: Sat, 11 May 2019 16:32:09 +0200
Subject: [PATCH] Add low RSSI controll support

Enables hostapd to disconnect STA if below defined threshold.

Fix minimal value


Add cflag


Move in makefile
---
 hostapd/Makefile             |  4 ++++
 hostapd/config_file.c        | 20 ++++++++++++++++++++
 hostapd/defconfig            |  3 +++
 hostapd/hostapd.conf         | 29 +++++++++++++++++++++++++++++
 src/ap/ap_config.c           |  7 +++++++
 src/ap/ap_config.h           |  6 ++++++
 src/ap/sta_info.c            |  4 ++++
 src/ap/sta_info.h            |  4 ++++
 src/drivers/driver_nl80211.c |  4 ++++
 9 files changed, 81 insertions(+)

diff --git a/hostapd/Makefile b/hostapd/Makefile
index 65c5e9195..e943abf78 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -248,6 +248,10 @@ ifndef CONFIG_NO_CTRL_IFACE
 CFLAGS += -DCONFIG_CTRL_IFACE
 endif
 
+ifdef CONFIG_RSSI_CONTROL
+CFLAGS += -DCONFIG_RSSI_CONTROL
+endif
+
 ifdef CONFIG_IAPP
 CFLAGS += -DCONFIG_IAPP
 OBJS += ../src/ap/iapp.o
diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 3ba37098c..292050632 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3282,6 +3282,26 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 			return 1;
 		}
 		bss->send_probe_response = val;
+	#ifdef CONFIG_RSSI_CONTROL		
+		} else if (os_strcmp(buf, "signal_connect") == 0) {
+			bss->signal_auth_min = atoi(pos);
+		} else if (os_strcmp(buf, "signal_stay") == 0) {
+			bss->signal_stay_min = atoi(pos);
+		} else if (os_strcmp(buf, "signal_poll_time") == 0) {
+			bss->signal_poll_time = atoi(pos);
+			if (bss->signal_poll_time < 2) {
+				wpa_printf(MSG_ERROR, "Line %d: invalid signal poll time", line);
+				return 1;
+			}
+		} else if (os_strcmp(buf, "signal_strikes") == 0) {
+			bss->signal_strikes = atoi(pos);
+		} else if (os_strcmp(buf, "signal_drop_reason") == 0) {
+			bss->signal_drop_reason = atoi(pos);
+			if (bss->signal_drop_reason < 1 || bss->signal_drop_reason > 54) {
+				wpa_printf(MSG_ERROR, "Line %d: invalid signal drop reason", line);
+				return 1;
+			}
+	#endif /* CONFIG_RSSI_CONTROL */
 	} else if (os_strcmp(buf, "supported_rates") == 0) {
 		if (hostapd_parse_intlist(&conf->supported_rates, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid rate list",
diff --git a/hostapd/defconfig b/hostapd/defconfig
index 1f504ad18..091409193 100644
--- a/hostapd/defconfig
+++ b/hostapd/defconfig
@@ -379,6 +379,9 @@ CONFIG_IPV6=y
 # Airtime policy support
 #CONFIG_AIRTIME_POLICY=y
 
+# RSSI control support
+#CONFIG_RSSI_CONTROL=y
+
 # Override default value for the wpa_disable_eapol_key_retries configuration
 # parameter. See that parameter in hostapd.conf for more details.
 #CFLAGS += -DDEFAULT_WPA_DISABLE_EAPOL_KEY_RETRIES=1
diff --git a/hostapd/hostapd.conf b/hostapd/hostapd.conf
index 97ae2930a..b3673316e 100644
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -2532,6 +2532,35 @@ own_ip_addr=127.0.0.1
 # airtime.
 #airtime_bss_limit=1
 
+##### RSSI control configuration ##############################################
+
+# Signal required to connect (dBm)
+# This can be used to set minimum signal level required for STA to connect.
+# Defaults to -128 dBm so all stations are accepted.
+#signal_connect=-128
+
+# Signal required to stay (dBm)
+# This can be used to set minimum signal level required for STA to remain 
+# connected.
+# Defaults to -128 dBm so no stations will be disconnected.
+#signal_stay=-128
+
+# Signal poll time (s)
+# Sets the time in s between polling for STA signal levels.
+# Defaults to 10s, minimum is 3s.
+#signal_poll_time=10
+
+# Number of strikes
+# Defines the number of polls that STA can be below threshold and remain
+# connected, after its exhausted STA will be disconnected.
+# Defaults to 3.
+#signal_strikes=3
+
+# STA drop reason
+# Defines the IEEE802.11 Deauth Reason Code returned when disconnecting STA
+# Defaults to 3(station is leaving (or has left) IBSS or ESS)
+#signal_drop_reason=3
+
 ##### TESTING OPTIONS #########################################################
 #
 # The options in this section are only available when the build configuration
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 09ab3727a..c998691af 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -81,6 +81,13 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->eapol_version = EAPOL_VERSION;
 
 	bss->max_listen_interval = 65535;
+#ifdef CONFIG_RSSI_CONTROL
+	bss->signal_auth_min = -128;  /* this is lower than any real signal, so all stations will be accepted */
+	bss->signal_stay_min = -128;
+	bss->signal_strikes = 3;
+	bss->signal_poll_time = 10;
+    bss->signal_drop_reason = 3; /* "Local choice" */
+#endif /* CONFIG_RSSI_CONTROL */
 
 	bss->pwd_group = 19; /* ECC: GF(p=256) */
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index b0b5c6f3f..5fdf5ddbb 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -340,6 +340,12 @@ struct hostapd_bss_config {
 	int wds_sta;
 	int isolate;
 	int start_disabled;
+	int	signal_auth_min;    /* Minimum signal a STA needs to authenticate */
+	int signal_stay_min;    /* Minimum signal needed to stay connected. */
+	int signal_poll_time;   /* Time in seconds between checks of connected STAs */
+	int signal_strikes;     /* Number of consecutive times signal can be low 
+								before dropping the STA.  */
+	int signal_drop_reason; /* IEEE802.11 reason code transmitted when dropping a STA.  */
 
 	int auth_algs; /* bitfield of allowed IEEE 802.11 authentication
 			* algorithms, WPA_AUTH_ALG_{OPEN,SHARED,LEAP} */
diff --git a/src/ap/sta_info.c b/src/ap/sta_info.c
index 4f9eae847..aa510c124 100644
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -718,6 +718,10 @@ struct sta_info * ap_sta_add(struct hostapd_data *hapd, const u8 *addr)
 				      &sta->probe_ie_taxonomy);
 #endif /* CONFIG_TAXONOMY */
 
+#ifdef CONFIG_RSSI_CONTROL
+    sta->sig_drop_strikes = 0;
+#endif /* CONFIG_RSSI_CONTROL */
+
 	return sta;
 }
 
diff --git a/src/ap/sta_info.h b/src/ap/sta_info.h
index c185d7a0a..d2a4b501f 100644
--- a/src/ap/sta_info.h
+++ b/src/ap/sta_info.h
@@ -255,6 +255,10 @@ struct sta_info {
 	struct wpabuf *fils_g_sta;
 #endif /* CONFIG_FILS */
 
+#ifdef CONFIG_RSSI_CONTROL
+	int sig_drop_strikes;  /* Number of times signal was below threshold. */
+#endif /* CONFIG_RSSI_CONTROL */
+
 #ifdef CONFIG_OWE
 	u8 *owe_pmk;
 	size_t owe_pmk_len;
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 3556b6d69..5423c692e 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -6330,6 +6330,7 @@ static int get_sta_handler(struct nl_msg *msg, void *arg)
 		[NL80211_STA_INFO_RX_BYTES64] = { .type = NLA_U64 },
 		[NL80211_STA_INFO_TX_BYTES64] = { .type = NLA_U64 },
 		[NL80211_STA_INFO_SIGNAL] = { .type = NLA_U8 },
+		[NL80211_STA_INFO_SIGNAL_AVG] = { .type = NLA_U8 },
 		[NL80211_STA_INFO_ACK_SIGNAL] = { .type = NLA_U8 },
 		[NL80211_STA_INFO_RX_DURATION] = { .type = NLA_U64 },
 		[NL80211_STA_INFO_TX_DURATION] = { .type = NLA_U64 },
@@ -6401,6 +6402,9 @@ static int get_sta_handler(struct nl_msg *msg, void *arg)
 			nla_get_u32(stats[NL80211_STA_INFO_TX_FAILED]);
 	if (stats[NL80211_STA_INFO_SIGNAL])
 		data->signal = nla_get_u8(stats[NL80211_STA_INFO_SIGNAL]);
+	if (stats[NL80211_STA_INFO_SIGNAL_AVG])
+		data->last_ack_rssi =
+			(int) (s8) nla_get_u8(stats[NL80211_STA_INFO_SIGNAL_AVG]);
 	if (stats[NL80211_STA_INFO_ACK_SIGNAL]) {
 		data->last_ack_rssi =
 			nla_get_u8(stats[NL80211_STA_INFO_ACK_SIGNAL]);
-- 
2.21.0

